generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiVariable {
  id                     String                   @id @default(uuid()) @db.Uuid
  strategy               String
  platform               String
  variable               Json
  userId                 String                   @db.Uuid
  title                  String?
  createdAt              DateTime?                @default(now()) // Optional with default
  createdBy              String?
  relationToMain         String?
  dataMarking            String?
  User                   User                     @relation(fields: [userId], references: [id])
  Balance                Balance[]
  FutureCurrent          FutureCurrent[]
  SpotCurrent            SpotCurrent[]
  TransactionDetailsSpot TransactionDetailsSpot[]
}

model Balance {
  id          String      @id @default(uuid()) @db.Uuid
  createdAt   DateTime    @default(now())
  apiId       String      @db.Uuid
  amount      Decimal?
  asset       String?
  availBal    Decimal?
  cashBal     Decimal?
  email       String?
  frozenBal   Decimal?
  orderCalAt  String?
  strategy    String?
  usd         Decimal?
  ApiVariable ApiVariable @relation(fields: [apiId], references: [id])
}

model DetailCurPositionFuture {
  id             String   @id @default(uuid()) @db.Uuid
  createAt       DateTime @default(now())
  strategy       String
  email          String
  datetimeOpen   DateTime
  asset          String
  position       String
  sizeAmount     Float
  openOrderPrice Float
  unlUSDT        Float
  unl            Float
}

model DetailCurrentPositionFuture {
  id            String    @id @default(uuid()) @db.Uuid
  calAt         DateTime  @default(now())
  orderCalAt    String?
  datetimeOpen  DateTime?
  asset         String?
  sumsizeAmount Decimal?
  avgPrice      Decimal?
  unlUsdt       Decimal?
  unlPercent    Decimal?
  apiId         String
  email         String
  strategy      String
  username      String
  position      String?
}

model FutureCurrent {
  id          String      @id @default(uuid()) @db.Uuid
  createdAt   DateTime    @default(now())
  data        Json
  apiId       String      @db.Uuid
  ApiVariable ApiVariable @relation(fields: [apiId], references: [id])
}

model SpotCurrent {
  id          String      @id @default(uuid()) @db.Uuid
  createdAt   DateTime    @default(now())
  data        Json
  apiId       String      @db.Uuid
  ApiVariable ApiVariable @relation(fields: [apiId], references: [id])
}

model TableBalanceDetail {
  id        String   @id @default(uuid()) @db.Uuid
  strategy  String
  create_at DateTime @default(now())
  email     String
  asset     String
  amount    Decimal
  usd       Decimal
}

model TransactionDetailsFuture {
  id              String    @id @default(uuid()) @db.Uuid
  orderCalAt      String?
  createdAtOpen   DateTime?
  createdAtClose  DateTime?
  asset           String?
  position        String?
  sizingAmount    Decimal?
  operOrderPrice  Decimal?
  closeOrderPrice Decimal?
  totalTradingFee Decimal?
  pnlUsdt         Decimal?
  pnlPercent      Decimal?
  apiId           String
  email           String
  strategy        String
  username        String
  createdAt       DateTime  @default(now())
}

model TransactionDetailsSpot {
  id                String      @id @default(uuid()) @db.Uuid
  createdAt         DateTime    @default(now())
  asset             String
  sizeAmount        Decimal
  orderPrice        Decimal
  side              String
  fee               Decimal
  feeAsset          String
  feeRate           Decimal
  execType          String
  queue             Int
  remainAmount      Decimal
  Rpl               Decimal
  avgSellPrice      Decimal
  createdAtSellLast DateTime?
  listOrderSell     Json
  sumSellFee        Decimal
  apiId             String      @db.Uuid
  ApiVariable       ApiVariable @relation(fields: [apiId], references: [id])
}

model User {
  id          String        @id @default(uuid()) @db.Uuid
  username    String        @unique
  email       String
  affiliate   String
  createdAt   DateTime      @default(now())
  isDelete    Boolean
  createdBy   String?
  ApiVariable ApiVariable[]
  wallet      wallet[]      @ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model wallet {
  user_id    String    @db.Uuid
  public_key String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  id         String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@ignore
}
